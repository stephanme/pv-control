name: Docker Image CI

on:
  pull_request:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: '20'
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"
    - uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true

    - name: Install UI dependencies
      run: npm install -g @angular/cli && npm ci --legacy-peer-deps
      working-directory: ./ui
    - name: Lint UI
      run: ng lint
      working-directory: ./ui
    - name: Build UI
      # base-href must match ingress path
      run: ng build --configuration production --base-href /pvcontrol/
      working-directory: ./ui
    - name: Test UI
      run: npm run test
      working-directory: ./ui

    - name: Install Python dependencies
      run: uv sync --all-extras --dev --locked
    - name: Lint Python
      run: |
        uv run ruff check
        uv run ruff format --check
        uv run pyright
    - name: Run Python tests
      run: uv run -m unittest discover -s ./tests

    - name: Build distribution
      run: |
        echo -n ${{ github.sha }} > version
        tar --exclude ./pvcontrol/__pycache__ -zcv -f pv-control.tar.gz ./pvcontrol/ ./ui/dist/ui/ pyproject.toml uv.lock *.md LICENSE version pvcontrol.nginx pvcontrol.service
    - name: Archive distribution
      uses: actions/upload-artifact@v4
      with:
        name: pv-control.tar.gz
        path: pv-control.tar.gz
    - name: Upload release distribution
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        files: pv-control.tar.gz

    - name: Docker meta
      id: docker_meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=schedule
          type=ref,event=pr
          type=ref,event=branch
          type=ref,event=tag
          type=raw,value=latest,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build and push docker images
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm/v7,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.docker_meta.outputs.tags }}
        labels: ${{ steps.docker_meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max